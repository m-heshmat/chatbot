from pydantic import BaseModel, Field, HttpUrl
from typing import List, Optional

## Pydantic model
class Vulnerability(BaseModel):
    description: str = Field(
        ..., min_length=5, max_length=1000,
        description=(
            "A clear, concise, and technically accurate explanation of the vulnerability. "
            "Must include what the vulnerability is, how it can be exploited, what systems or data are at risk, "
            "and the potential impact if exploited. Avoid vague statements; provide specific technical details and context."
        )
    )

    remediation: str = Field(
        ..., min_length=5, max_length=1000,
        description=(
            "A specific, actionable, and technically sound solution or mitigation strategy to address the vulnerability. "
            "Include step-by-step instructions, configuration changes, patches, or compensating controls. "
            "Recommendations must be practical, effective, and, where applicable, reference official vendor or standards documentation. "
            "Avoid generic advice."
        )
    )

    category: str = Field(
        ..., min_length=5, max_length=50,
        description=(
            "Type or classification of the vulnerability."
            "The standardized type or classification of the vulnerability (e.g., 'SQL Injection', 'Cross-Site Scripting', "
            "'Authentication Bypass', 'Privilege Escalation'). Use widely recognized taxonomies such as OWASP, CWE, or NVD categories."
        )
    )

    severity: str = Field(...,
                          description="Severity level of the vulnerability: low, medium, or high.")

    
                     

    search_results: Optional[List[dict]] = Field(
        None,
        description=(
            "A list of relevant search results for this vulnerability, each containing a 'link' and a 'snippet'. "
            "These should be sourced using the web search utility (see app/tools/websearch.py) and must be authoritative and highly relevant. "
            "If possible, first, strictly include, in order, results from NIST, OWASP, vendor advisories, or reputable security blogs. And then, include other relevant results if you didn't found any of the sources mentioned."
        )
    )


class VulnerabilityList(BaseModel):
    vulnerabilities: List[Vulnerability] = Field(...,
                                                 description="A list of identified vulnerabilities with corresponding remediation steps.")